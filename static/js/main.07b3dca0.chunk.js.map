{"version":3,"sources":["firebase.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","authDomain","databaseURL","projectId","storageBucket","App","react_default","a","createElement","className","App_TimeWidget","Component","TimeWidget","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","now","Date","lastSpill","resetSpillCounter","bind","assertThisInitialized","_this2","database","ref","on","snapshot","setState","val","time","setInterval","logRef","spill","push","elapsedTime","s","Math","floor","substr","m","h","d","Fragment","join","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAQAA,IAASC,cANM,CACXC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,oCAGJL,QAAf,ECLMM,2LAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAD,eALQC,cAYZC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAM,CAACC,IAAKC,KAAKD,MAAOE,UAAWD,KAAKD,OAC7CR,EAAKW,kBAAoBX,EAAKW,kBAAkBC,KAAvBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAHXA,mFAMC,IAAAc,EAAAX,KACJlB,EAAS8B,WAAWC,IAAI,QAC9BC,GAAG,cAAe,SAACC,GACxBJ,EAAKK,SAAS,CAACT,UAAUQ,EAASE,MAAMC,SAE1CC,YAAY,kBAAIR,EAAKK,SAAS,CAACX,IAAIC,KAAKD,SAAS,iDAIjD,IAAIe,EAAStC,EAAS8B,WAAWC,IAAI,QACjCQ,EAAQ,CAACH,KAAKZ,KAAKD,OAEvBe,EAAOE,KAAKD,GAEZrB,KAAKgB,SAAS,CAACT,UAAUP,KAAKI,MAAMC,uCAIlC,IAAIkB,EAAcvB,KAAKI,MAAMC,IAAML,KAAKI,MAAMG,UAC1CiB,GAAK,KAAOC,KAAKC,MAAOH,EAAY,KAAO,IAAII,QAAQ,GACvDC,GAAK,KAAOH,KAAKC,MAAOH,EAAW,KAAa,IAAII,QAAQ,GAC5DE,GAAK,KAAOJ,KAAKC,MAAOH,EAAW,MAAgB,IAAII,QAAQ,GAC/DG,EAAIL,KAAKC,MAAOH,EAAW,OAE/B,OAAOlC,EAAAC,EAAAC,cAACF,EAAAC,EAAMyC,SAAP,KACL1C,EAAAC,EAAAC,cAAA,oDAEAF,EAAAC,EAAAC,cAAA,QAAMC,UAAY,SAAS,CAACsC,EAAED,EAAED,EAAEJ,GAAGQ,KAAK,MAC1C3C,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,UAAQ0C,QAAWjC,KAAKQ,mBAAxB,iDApCiB0B,IAAMxC,WAyChBN,IC7CK+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.07b3dca0.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/database'\nconst config = {\n    authDomain: \"david-spill-backend.firebaseapp.com\",\n    databaseURL: \"https://david-spill-backend.firebaseio.com\",\n    projectId: \"david-spill-backend\",\n    storageBucket: \"david-spill-backend.appspot.com\",\n};\nfirebase.initializeApp(config);\nexport default firebase;","import React, { Component } from 'react';\nimport firebase from './firebase'; \nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <TimeWidget />\n        </header>\n      </div>\n    );\n  }\n}\n\nclass TimeWidget extends React.Component{\n  constructor(props){\n      super(props);\n      this.state={now: Date.now(), lastSpill: Date.now()};\n      this.resetSpillCounter = this.resetSpillCounter.bind(this);\n  }\n\n  componentDidMount(){\n    let logRef = firebase.database().ref('logs');\n    logRef.on('child_added', (snapshot) => {\n      this.setState({lastSpill:snapshot.val().time});\n    })\n    setInterval(()=>this.setState({now:Date.now()}), 500);\n  }\n\n  resetSpillCounter(){\n    let logRef = firebase.database().ref('logs');\n    let spill = {time:Date.now()};\n\n    logRef.push(spill);\n\n    this.setState({lastSpill:this.state.now});\n  }\n\n  render(){\n      let elapsedTime = this.state.now - this.state.lastSpill;\n      let s = (\"00\" + Math.floor((elapsedTime/1000))%60).substr(-2);\n      let m = (\"00\" + Math.floor((elapsedTime/(1000*60)))%60).substr(-2);\n      let h = (\"00\" + Math.floor((elapsedTime/(1000*60*60)))%24).substr(-2);\n      let d = Math.floor((elapsedTime/(1000*60*60*24)))\n\n      return <React.Fragment>\n        <p>Time since David has spilled something:</p>\n\n        <span className = \"timer\">{[d,h,m,s].join(\":\")}</span>\n        <p/>\n        <button onClick = {this.resetSpillCounter}>Oh no, David spilled something again!</button>\n      </React.Fragment>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}